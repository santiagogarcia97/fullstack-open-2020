{"version":3,"sources":["components/PersonForm.js","components/Filter.js","components/PersonDetails.js","components/PersonList.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","onSubmit","name","number","handleName","handleNumber","value","onChange","type","Filter","searchName","handleFilter","PersonDetails","person","handlePersonDelete","onClick","PersonList","persons","map","p","key","Notification","notification","message","cssClass","isError","className","apiUrl","axios","get","then","response","data","post","delete","id","put","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setSearchName","setNotification","useEffect","personService","allPersons","personsFiltered","filter","search","RegExp","event","target","preventDefault","newPerson","find","window","confirm","catch","err","concat","setTimeout","deletePerson","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.56024364.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst PersonForm = ({onSubmit, name, number, handleName, handleNumber}) => {\r\n\r\n  return(\r\n    <form onSubmit={onSubmit}>\r\n      <div>\r\n        <p>Name: <input value={name} onChange={handleName} /></p>\r\n        <p>Number: <input value={number} onChange={handleNumber} /></p>\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default PersonForm;","import React from \"react\";\r\n\r\nconst Filter = ({searchName, handleFilter}) => {\r\n  return(\r\n    <p>\r\n      Filter: <input value={searchName} onChange={handleFilter}/>\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default Filter","import React from \"react\";\r\n\r\nconst PersonDetails = ({person, handlePersonDelete}) => {\r\n\r\n  return(\r\n    <p>\r\n      <strong>{person.name}</strong> {person.number}\r\n      <button onClick={() => {\r\n        handlePersonDelete(person)\r\n      }}>\r\n        Delete\r\n      </button>\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default PersonDetails","import React from \"react\";\r\nimport PersonDetails from \"./PersonDetails\";\r\n\r\nconst PersonList = ({persons, handlePersonDelete}) => {\r\n  return(\r\n    <div>\r\n      {persons.map((p) =>\r\n        <PersonDetails\r\n          key={p.name}\r\n          person={p}\r\n          handlePersonDelete={handlePersonDelete}\r\n        />)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PersonList","import React from \"react\";\r\n\r\nconst Notification = ({ notification }) => {\r\n  if (notification.message === '') {\r\n    return null\r\n  }\r\n\r\n  const cssClass = notification.isError ? 'error' : 'success'\r\n\r\n  return (\r\n    <div className={`notify ${cssClass}`}>\r\n      {notification.message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\n\r\nconst apiUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios\r\n    .get(apiUrl)\r\n    .then(response => response.data)\r\n}\r\n\r\nconst create = (person) => {\r\n  return axios\r\n    .post(apiUrl, person)\r\n    .then(response => response.data)\r\n}\r\n\r\nconst remove = (person) => {\r\n  return axios\r\n    .delete(`${apiUrl}/${person.id}`)\r\n    .then(response => response.data)\r\n}\r\n\r\nconst update = (person) => {\r\n  return axios\r\n    .put(`${apiUrl}/${person.id}`, person)\r\n    .then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, remove, update}","import React, {useEffect, useState} from 'react'\n\nimport PersonForm from \"./components/PersonForm\";\nimport Filter from \"./components/Filter\";\nimport PersonList from \"./components/PersonList\";\nimport Notification from \"./components/Notification\";\nimport personService from \"./services/persons\"\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]);\n  const [ newName, setNewName ] = useState('');\n  const [ newNumber, setNewNumber ] = useState('');\n  const [ searchName, setSearchName ] = useState('');\n  const [ notification, setNotification] =\n    useState({\n      message: '',\n      isError: false\n    })\n\n  const handleNameChange = (event) => {\n      setNewName(event.target.value)\n  };\n  const handleNumberChange = (event) => {\n      setNewNumber(event.target.value)\n  };\n  const handleFilter = (event) => {\n      setSearchName(event.target.value)\n  };\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    let newPerson = persons.find(person => person.name === newName)\n\n    if(!newPerson) {\n      newPerson = {\n          name: newName,\n          number: newNumber\n        };\n\n      personService.create(newPerson)\n        .then(data => {\n          setPersons(persons.concat(data));\n          setSearchName('');\n          setNotification({\n            message: `${newName} has been added`,\n            isError: false\n          })\n        })\n        .catch(err => {\n          setNotification({\n            message: `there was a problem while trying to add ${newName} to the server. Please refresh the browser`,\n            isError: true\n          })\n        })\n    }\n    else {\n      if(window.confirm(`${newName} is already added, replace the old number with the new one?`)) {\n        newPerson.number = newNumber\n        personService.update(newPerson)\n          .then(data => {\n            setPersons(persons.map(p => p.id === data.id ? data : p));\n            setSearchName('');\n            setNotification({\n              message: `${newName}'s number has been updated`,\n              isError: false\n            })\n          })\n          .catch(err => {\n            setNotification({\n              message: `${newName} has already been deleted from the server. Please refresh the browser`,\n              isError: true\n            })\n          })\n      }\n    }\n\n    setTimeout(() => {\n      setNotification({\n        message: '',\n        isError: false\n      })\n    }, 5000)\n  };\n\n  const handlePersonDelete = (deletePerson) => {\n    const confirm = window.confirm(`Delete ${deletePerson.name}?`)\n    if(confirm) {\n      personService.remove(deletePerson)\n        .then(data => {\n          setPersons(persons.filter(p => p.id !== deletePerson.id))\n          setSearchName('')\n          setNotification({\n            message: `${deletePerson.name} has been deleted`,\n            isError: false\n          })\n        })\n        .catch(err => {\n          setNotification({\n            message: `${deletePerson.name} has already been deleted from the server. Please refresh the browser`,\n            isError: true\n          })\n        })\n\n      setTimeout(() => {\n        setNotification({\n          message: '',\n          isError: false\n        })\n      }, 5000)\n    }\n  }\n\n  useEffect(() => {\n    personService.getAll()\n      .then(allPersons => setPersons(allPersons))\n  }, []);\n\n  const personsFiltered = searchName\n    ? persons.filter(p => p.name.search(new RegExp(`.*${searchName}.*`, 'ig')) !== -1)\n    : persons;\n\n  return (\n      <div>\n        <h1>Phonebook</h1>\n\n        <Filter searchName={searchName} handleFilter={handleFilter}/>\n\n        <h2>Add new</h2>\n        <PersonForm\n          onSubmit={handleFormSubmit}\n          name={newName}\n          number={newNumber}\n          handleName={handleNameChange}\n          handleNumber={handleNumberChange}\n        />\n\n        <h2>Numbers</h2>\n\n        <PersonList\n          persons={personsFiltered}\n          handlePersonDelete={handlePersonDelete}\n        />\n\n        <Notification notification={notification} />\n\n      </div>\n  )\n};\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}